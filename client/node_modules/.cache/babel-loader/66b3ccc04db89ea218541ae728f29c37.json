{"ast":null,"code":"var emojis = require('../build/emoji.json'); // English is loaded by default\n\n\nvar enLanguage = require('../languages/en/index'); // Add emojis\n\n\nObject.assign(enLanguage.labels, emojis); // Cache loaded languages\n\nvar languages = {\n  en: enLanguage\n};\nmodule.exports = {\n  /**\n   * Registers the specified language\n   *\n   * @param {String} languageCode\n   *     - Two-digit code for the language to register\n   * @param {Object} language\n   *     - The language module to register\n   */\n  addLanguage: function addLanguage(languageCode, language) {\n    if (!language.labels) {\n      throw new Error('language.labels must be defined!');\n    } // Add emojis\n\n\n    Object.assign(language.labels, emojis);\n    languages[languageCode] = language;\n  },\n\n  /**\n   * Retrieves a language object from the cache,\n   * or tries to load it from the set of supported languages\n   *\n   * @param {String} languageCode - Two-digit code for the language to fetch\n   */\n  getLanguage: function getLanguage(languageCode) {\n    if (!languageCode) {\n      // Default to english if no language was specified\n      return languages.en;\n    }\n\n    if (!languages[languageCode]) {\n      // Try to load specified language\n      try {\n        // eslint-disable-next-line max-len\n        var language = require('../languages/' + languageCode + '/index'); // Add language to in-memory cache\n\n\n        this.addLanguage(languageCode, language);\n      } catch (err) {\n        throw new Error('No language found: ' + languageCode);\n      }\n    }\n\n    return languages[languageCode];\n  },\n\n  /**\n   * Returns AFINN-165 weighted labels for the specified language\n   *\n   * @param {String} languageCode - Two-digit language code\n   * @return {Object}\n   */\n  getLabels: function getLabels(languageCode) {\n    var language = this.getLanguage(languageCode);\n    return language.labels;\n  },\n\n  /**\n   * Applies a scoring strategy for the current token\n   *\n   * @param {String} languageCode - Two-digit language code\n   * @param {Array} tokens - Tokens of the phrase to analyze\n   * @param {int} cursor - Cursor of the current token being analyzed\n   * @param {int} tokenScore - The score of the current token being analyzed\n   */\n  applyScoringStrategy: function applyScoringStrategy(languageCode, tokens, cursor, tokenScore) {\n    var language = this.getLanguage(languageCode); // Fallback to default strategy if none was specified\n    // eslint-disable-next-line max-len\n\n    var scoringStrategy = language.scoringStrategy || defaultScoringStrategy;\n    return scoringStrategy.apply(tokens, cursor, tokenScore);\n  }\n};\nvar defaultScoringStrategy = {\n  apply: function apply(tokens, cursor, tokenScore) {\n    return tokenScore;\n  }\n};","map":null,"metadata":{},"sourceType":"script"}