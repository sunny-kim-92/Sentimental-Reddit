{"ast":null,"code":"import _classCallCheck from \"/Users/Sunny/Code/Sentimental-Reddit/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Sunny/Code/Sentimental-Reddit/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/Sunny/Code/Sentimental-Reddit/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/Sunny/Code/Sentimental-Reddit/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/Sunny/Code/Sentimental-Reddit/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/Sunny/Code/Sentimental-Reddit/client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/Sunny/Code/Sentimental-Reddit/client/src/Analysis.js\";\nimport React, { Component } from \"react\";\nimport \"./App.css\";\nimport { Bar } from \"react-chartjs-2\";\nimport ReactTable from \"react-table\";\nimport \"react-table/react-table.css\";\n\nvar _ = require(\"lodash\");\n\nvar axios = require(\"axios\");\n\nvar Sentiment = require(\"sentiment\");\n\nvar cheerio = require(\"cheerio\");\n\nvar rp = require(\"request-promise\");\n\nvar sentiment = new Sentiment();\n\nvar Analysis =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Analysis, _Component);\n\n  function Analysis(props) {\n    var _this;\n\n    _classCallCheck(this, Analysis);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Analysis).call(this, props));\n    _this.state = {\n      subreddit: \"\",\n      comments0: 0,\n      comments1: 0,\n      comments2: 0,\n      comments3: 0,\n      comments4: 0,\n      comments5: 0,\n      comments6: 0,\n      comments7: 0,\n      azureScore0: 0,\n      azureScore1: 0,\n      azureScore2: 0,\n      azureScore3: 0,\n      azureScore4: 0,\n      azureScore5: 0,\n      azureScore6: 0,\n      azureScore7: 0,\n      textAPIScore0: 0,\n      textAPIScore1: 0,\n      textAPIScore2: 0,\n      textAPIScore3: 0,\n      textAPIScore4: 0,\n      textAPIScore5: 0,\n      textAPIScore6: 0,\n      textAPIScore7: 0,\n      post0: \"\",\n      post1: \"\",\n      post2: \"\",\n      post3: \"\",\n      post4: \"\",\n      post5: \"\",\n      post6: \"\",\n      post7: \"\",\n      postScore0: 0,\n      postScore1: 0,\n      postScore2: 0,\n      postScore3: 0,\n      postScore4: 0,\n      postScore5: 0,\n      postScore6: 0,\n      postScore7: 0,\n      words0: 0,\n      words1: 0,\n      words2: 0,\n      words3: 0,\n      words4: 0,\n      words5: 0,\n      words6: 0,\n      words7: 0,\n      finalUrl: \"\"\n    };\n    _this.setState = _this.setState.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(Analysis, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var _this2 = this;\n\n      //Define 'getComments' method\n      // console.log(\"hi\");\n      var getComments = function getComments(elements) {\n        var finalArr = [];\n        elements.forEach(function (el) {\n          if (el.data.replies) {\n            finalArr.push(getComments(el.data.replies.data.children));\n          }\n\n          finalArr.push(el.data.body);\n        });\n        return finalArr;\n      };\n\n      var temp = this.props.url;\n      var update = temp.replace(/www.reddit.com/gi, \"old.reddit.com\");\n      var final = update.replace(/^reddit.com/gi, \"old.reddit.com\"); //Declare options for request-promise scraping call\n\n      rp(\"https://cors-anywhere.herokuapp.com/\" + final, {// \"accept\":\n        //   \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\",\n        // \"accept-encoding\": \"gzip, deflate, br\",\n        // \"accept-language\":\n        //   \"en-US,en;q=0.9,fr;q=0.8,ro;q=0.7,ru;q=0.6,la;q=0.5,pt;q=0.4,de;q=0.3\",\n        // \"cache-control\": \"max-age=0\",\n        // \"upgrade-insecure-requests\": \"1\",\n        // \"user-agent\":\n        //   \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36\"\n      }).then(function (response) {\n        var final = cheerio.load(response);\n        return final;\n      }) //Begins promise chain, returns array of comment URLs\n      // rp(options)\n      .then(function ($) {\n        var linkArr = [];\n        var scoreArr = [];\n        $(\"a.bylink.comments.may-blank\").attr(\"href\", function (i, val) {\n          linkArr.push(val);\n        });\n        $(\".score.unvoted\").attr(\"title\", function (i, val) {\n          if (val === undefined) {\n            scoreArr.push(\"0\");\n          } else {\n            scoreArr.push(val);\n          }\n        });\n        scoreArr = scoreArr.slice(0, 8);\n        scoreArr.forEach(function (score, index) {\n          var key = \"postScore\" + index;\n          var stateObj = {};\n          stateObj[key] = score;\n\n          _this2.setState(stateObj);\n        });\n        return linkArr.slice(0, 8);\n      }) //For each post, returns .JSON of each link in the array, also sets title\n      .then(function (arr) {\n        arr.forEach(function (str, index) {\n          var strSplit = str.split(\"/\");\n          var keyTitle = \"post\" + index;\n          var titleObj = {};\n          var title = \"/r/\" + strSplit[4];\n          titleObj[\"subreddit\"] = title;\n          var phrase = strSplit[7].replace(/_/g, \" \").toLowerCase().split(\" \").map(function (word) {\n            return word[0].toUpperCase() + word.substr(1);\n          }).join(\" \");\n          titleObj[keyTitle] = phrase;\n\n          _this2.setState(titleObj); // Recursively unnests comments and sets state\n\n\n          axios.get(str + \".json\").then(function (res) {\n            var elements = res.data[1].data.children;\n\n            var str = _.flattenDeep(getComments(elements));\n\n            str = str.join(\" \");\n            var stateObj = {};\n            var commentKey = \"comments\" + index;\n            stateObj[commentKey] = str.slice(0, 75) + \"...\";\n\n            _this2.setState(stateObj);\n\n            return str;\n          }) //Finds Azure score\n          // .then((str) => {\n          //   let accessKey = \"f420e632e0de48a3a32861c44ca66d5d\";\n          //   let uri = \"eastus.api.cognitive.microsoft.com\";\n          //   let pathScore = \"/text/analytics/v2.0/sentiment\";\n          //   let pathPhrases = \"/text/analytics/v2.0/keyPhrases\";\n          //   let response_handler_score = response => {\n          //     let bodyScore = \"\";\n          //     response.on(\"data\", d => {\n          //       bodyScore += d;\n          //       let strScore = bodyScore.substring(23, 30);\n          //       strScore = strScore.replace(/[^\\d.-]/g, \"\");\n          //       let score = Math.round((+strScore - 0.5) * 2000) / 1000 + 0.0001;\n          //       let key = \"azureScore\" + index;\n          //       let stateObj = {};\n          //       stateObj[key] = score;\n          //       this.setState(stateObj);\n          //     });\n          //     response.on(\"error\", e => {\n          //       console.log(\"Error: \" + e.message);\n          //     });\n          //   };\n          //   let get_sentiments = documents => {\n          //     let bodyScore = JSON.stringify(documents);\n          //     let request_params_score = {\n          //       method: \"POST\",\n          //       hostname: uri,\n          //       path: pathScore,\n          //       headers: {\n          //         \"Ocp-Apim-Subscription-Key\": accessKey\n          //       }\n          //     };\n          //     let reqScore = https.request(\n          //       request_params_score,\n          //       response_handler_score\n          //     );\n          //     reqScore.write(bodyScore);\n          //     reqScore.end();\n          //   };\n          //   let documents = {\n          //     documents: [\n          //       { id: \"1\", language: \"en\", text: str.substring(0, 5000) }\n          //     ]\n          //   };\n          //   get_sentiments(documents);\n          //   return str;\n          // })\n          //Finds Sliwinski score\n          .then(function (str) {\n            var r1 = sentiment.analyze(str);\n            var keyScore = \"textAPIScore\" + index;\n            var apiObj = {};\n            var score = Math.round(+r1.comparative * 8000) / 1000 + 0.000001;\n\n            if (Math.abs(score) > 1) {\n              if (score > 1) {\n                score = 1;\n              } else {\n                score = -1;\n              }\n            }\n\n            apiObj[keyScore] = score;\n            var keyWords = \"words\" + index;\n            apiObj[keyWords] = r1.tokens.length;\n\n            _this2.setState(apiObj);\n\n            return str;\n          }).then(function (str) {\n            fetch(\"/api/aylien\", {\n              method: \"POST\",\n              body: str\n            });\n          });\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      // let azureAverage =\n      //   +(\n      //     +this.state.azureScore0 +\n      //     +this.state.azureScore1 +\n      //     +this.state.azureScore2 +\n      //     +this.state.azureScore3 +\n      //     +this.state.azureScore4 +\n      //     +this.state.azureScore5 +\n      //     +this.state.azureScore6 +\n      //     +this.state.azureScore7\n      //   ) / 8;\n      var textAPIAverage = +(+this.state.textAPIScore0 + +this.state.textAPIScore1 + +this.state.textAPIScore2 + +this.state.textAPIScore3 + +this.state.textAPIScore4 + +this.state.textAPIScore5 + +this.state.textAPIScore6 + +this.state.textAPIScore7) / 8;\n      var chartData = {\n        labels: [1, 2, 3, 4, 5, 6, 7, 8, \"Average\"],\n        datasets: [// {\n        //   label: \"Microsoft Azure\",\n        //   data: [\n        //     +this.state.azureScore0 - 0.0001,\n        //     +this.state.azureScore1 - 0.0001,\n        //     +this.state.azureScore2 - 0.0001,\n        //     +this.state.azureScore3 - 0.0001,\n        //     +this.state.azureScore4 - 0.0001,\n        //     +this.state.azureScore5 - 0.0001,\n        //     +this.state.azureScore6 - 0.0001,\n        //     +this.state.azureScore7 - 0.0001,\n        //     azureAverage\n        //   ],\n        //   backgroundColor: [\n        //     \"#00ffff\",\n        //     \"#00ffff\",\n        //     \"#00ffff\",\n        //     \"#00ffff\",\n        //     \"#00ffff\",\n        //     \"#00ffff\",\n        //     \"#00ffff\",\n        //     \"#00ffff\",\n        //     \"blue\"\n        //   ]\n        // },\n        {\n          label: \"Sliwinski / MIT Media Lab\",\n          data: [+this.state.textAPIScore0 - 0.000001, +this.state.textAPIScore1 - 0.000001, +this.state.textAPIScore2 - 0.000001, +this.state.textAPIScore3 - 0.000001, +this.state.textAPIScore4 - 0.000001, +this.state.textAPIScore5 - 0.000001, +this.state.textAPIScore6 - 0.000001, +this.state.textAPIScore7 - 0.000001, textAPIAverage],\n          backgroundColor: [\"#ffaafa\", \"#ffaafa\", \"#ffaafa\", \"#ffaafa\", \"#ffaafa\", \"#ffaafa\", \"#ffaafa\", \"#ffaafa\", \"red\"]\n        }]\n      };\n      var tableColumns = [{\n        Header: \"Post Name\",\n        accessor: \"postName\"\n      }, {\n        Header: \"Karma Score\",\n        accessor: \"karmaScore\"\n      }, {\n        Header: \"Comment Word Count\",\n        accessor: \"words\"\n      }, // {\n      //   Header: \"Microsoft Azure Score\",\n      //   accessor: \"azureScore\"\n      // },\n      {\n        Header: \"Sliwinski / MIT Media Lab\",\n        accessor: \"textScore\"\n      }];\n      var commentColumns = [{\n        Header: \"ID\",\n        accessor: \"id\",\n        width: 100\n      }, {\n        Header: \"Post Title\",\n        accessor: \"postTitle\",\n        minWidth: 200\n      }, {\n        Header: \"Beginning of Comment String\",\n        accessor: \"comments\",\n        minWidth: 400\n      }];\n      var commentData = [{\n        id: 1,\n        postTitle: this.state.post0,\n        comments: this.state.comments0\n      }, {\n        id: 2,\n        postTitle: this.state.post1,\n        comments: this.state.comments1\n      }, {\n        id: 3,\n        postTitle: this.state.post2,\n        comments: this.state.comments2\n      }, {\n        id: 4,\n        postTitle: this.state.post3,\n        comments: this.state.comments3\n      }, {\n        id: 5,\n        postTitle: this.state.post4,\n        comments: this.state.comments4\n      }, {\n        id: 6,\n        postTitle: this.state.post5,\n        comments: this.state.comments5\n      }, {\n        id: 7,\n        postTitle: this.state.post6,\n        comments: this.state.comments6\n      }, {\n        id: 8,\n        postTitle: this.state.post7,\n        comments: this.state.comments7\n      }];\n      var tableData = [{\n        postName: this.state.post0,\n        karmaScore: this.state.postScore0,\n        // words: this.state.words0,\n        // azureScore: this.state.azureScore0 - 0.0001,\n        textScore: Math.round(this.state.textAPIScore0 * 1000) / 1000\n      }, {\n        postName: this.state.post1,\n        karmaScore: this.state.postScore1,\n        words: this.state.words1,\n        // azureScore: this.state.azureScore1 - 0.0001,\n        textScore: Math.round(this.state.textAPIScore1 * 1000) / 1000\n      }, {\n        postName: this.state.post2,\n        karmaScore: this.state.postScore2,\n        words: this.state.words2,\n        // azureScore: this.state.azureScore2 - 0.0001,\n        textScore: Math.round(this.state.textAPIScore2 * 1000) / 1000\n      }, {\n        postName: this.state.post3,\n        karmaScore: this.state.postScore3,\n        words: this.state.words3,\n        // azureScore: this.state.azureScore3 - 0.0001,\n        textScore: Math.round(this.state.textAPIScore3 * 1000) / 1000\n      }, {\n        postName: this.state.post4,\n        karmaScore: this.state.postScore4,\n        words: this.state.words4,\n        // azureScore: this.state.azureScore4 - 0.0001,\n        textScore: Math.round(this.state.textAPIScore4 * 1000) / 1000\n      }, {\n        postName: this.state.post5,\n        karmaScore: this.state.postScore5,\n        words: this.state.words5,\n        // azureScore: this.state.azureScore5 - 0.0001,\n        textScore: Math.round(this.state.textAPIScore5 * 1000) / 1000\n      }, {\n        postName: this.state.post6,\n        karmaScore: this.state.postScore6,\n        words: this.state.words6,\n        // azureScore: this.state.azureScore6 - 0.0001,\n        textScore: Math.round(this.state.textAPIScore6 * 1000) / 1000\n      }, {\n        postName: this.state.post7,\n        karmaScore: this.state.postScore7,\n        words: this.state.words7,\n        // azureScore: this.state.azureScore7 - 0.0001,\n        textScore: Math.round(this.state.textAPIScore7 * 1000) / 1000\n      }];\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 471\n        },\n        __self: this\n      }, this.state.textAPIScore0 && this.state.textAPIScore1 && this.state.textAPIScore2 ? React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 475\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 476\n        },\n        __self: this\n      }, \"Titles and Comment Threads for Top Posts of \", this.state.subreddit), React.createElement(ReactTable, {\n        data: commentData,\n        columns: commentColumns,\n        defaultPageSize: 8,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 479\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 484\n        },\n        __self: this\n      }), React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 485\n        },\n        __self: this\n      }, \"Sentiment Scores for Comments of Top Posts of\", \" \", this.state.subreddit), React.createElement(Bar, {\n        data: chartData,\n        type: \"Bar\",\n        className: \"-striped -highlight\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 489\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 494\n        },\n        __self: this\n      }), React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 495\n        },\n        __self: this\n      }, \"Scores and Data for Comments of Top Posts of\", \" \", this.state.subreddit), React.createElement(ReactTable, {\n        data: tableData,\n        columns: tableColumns,\n        defaultPageSize: 8,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 499\n        },\n        __self: this\n      })) : React.createElement(\"div\", {\n        className: \"centered\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 506\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 507\n        },\n        __self: this\n      }, \"Hold On, We're Going Home...\"), React.createElement(\"img\", {\n        alt: \"snoo-gif\",\n        src: \"http://i0.kym-cdn.com/photos/images/original/000/919/288/57b.gif\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 508\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return Analysis;\n}(Component);\n\nexport { Analysis as default };","map":{"version":3,"sources":["/Users/Sunny/Code/Sentimental-Reddit/client/src/Analysis.js"],"names":["React","Component","Bar","ReactTable","_","require","axios","Sentiment","cheerio","rp","sentiment","Analysis","props","state","subreddit","comments0","comments1","comments2","comments3","comments4","comments5","comments6","comments7","azureScore0","azureScore1","azureScore2","azureScore3","azureScore4","azureScore5","azureScore6","azureScore7","textAPIScore0","textAPIScore1","textAPIScore2","textAPIScore3","textAPIScore4","textAPIScore5","textAPIScore6","textAPIScore7","post0","post1","post2","post3","post4","post5","post6","post7","postScore0","postScore1","postScore2","postScore3","postScore4","postScore5","postScore6","postScore7","words0","words1","words2","words3","words4","words5","words6","words7","finalUrl","setState","bind","getComments","elements","finalArr","forEach","el","data","replies","push","children","body","temp","url","update","replace","final","then","response","load","$","linkArr","scoreArr","attr","i","val","undefined","slice","score","index","key","stateObj","arr","str","strSplit","split","keyTitle","titleObj","title","phrase","toLowerCase","map","word","toUpperCase","substr","join","get","res","flattenDeep","commentKey","r1","analyze","keyScore","apiObj","Math","round","comparative","abs","keyWords","tokens","length","fetch","method","textAPIAverage","chartData","labels","datasets","label","backgroundColor","tableColumns","Header","accessor","commentColumns","width","minWidth","commentData","id","postTitle","comments","tableData","postName","karmaScore","textScore","words"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { Bar } from \"react-chartjs-2\";\nimport ReactTable from \"react-table\";\nimport \"react-table/react-table.css\";\n\nconst _ = require(\"lodash\");\nconst axios = require(\"axios\");\nconst Sentiment = require(\"sentiment\");\nconst cheerio = require(\"cheerio\");\nconst rp = require(\"request-promise\");\nconst sentiment = new Sentiment();\n\nexport default class Analysis extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      subreddit: \"\",\n      comments0: 0,\n      comments1: 0,\n      comments2: 0,\n      comments3: 0,\n      comments4: 0,\n      comments5: 0,\n      comments6: 0,\n      comments7: 0,\n      azureScore0: 0,\n      azureScore1: 0,\n      azureScore2: 0,\n      azureScore3: 0,\n      azureScore4: 0,\n      azureScore5: 0,\n      azureScore6: 0,\n      azureScore7: 0,\n      textAPIScore0: 0,\n      textAPIScore1: 0,\n      textAPIScore2: 0,\n      textAPIScore3: 0,\n      textAPIScore4: 0,\n      textAPIScore5: 0,\n      textAPIScore6: 0,\n      textAPIScore7: 0,\n      post0: \"\",\n      post1: \"\",\n      post2: \"\",\n      post3: \"\",\n      post4: \"\",\n      post5: \"\",\n      post6: \"\",\n      post7: \"\",\n      postScore0: 0,\n      postScore1: 0,\n      postScore2: 0,\n      postScore3: 0,\n      postScore4: 0,\n      postScore5: 0,\n      postScore6: 0,\n      postScore7: 0,\n      words0: 0,\n      words1: 0,\n      words2: 0,\n      words3: 0,\n      words4: 0,\n      words5: 0,\n      words6: 0,\n      words7: 0,\n      finalUrl: \"\"\n    };\n\n    this.setState = this.setState.bind(this);\n  }\n\n  componentWillMount() {\n    //Define 'getComments' method\n    // console.log(\"hi\");\n    const getComments = elements => {\n      let finalArr = [];\n      elements.forEach(el => {\n        if (el.data.replies) {\n          finalArr.push(getComments(el.data.replies.data.children));\n        }\n        finalArr.push(el.data.body);\n      });\n      return finalArr;\n    };\n\n    let temp = this.props.url;\n    let update = temp.replace(/www.reddit.com/gi, \"old.reddit.com\");\n    let final = update.replace(/^reddit.com/gi, \"old.reddit.com\");\n\n    //Declare options for request-promise scraping call\n    rp(\"https://cors-anywhere.herokuapp.com/\" + final, {\n      // \"accept\":\n      //   \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\",\n      // \"accept-encoding\": \"gzip, deflate, br\",\n      // \"accept-language\":\n      //   \"en-US,en;q=0.9,fr;q=0.8,ro;q=0.7,ru;q=0.6,la;q=0.5,pt;q=0.4,de;q=0.3\",\n      // \"cache-control\": \"max-age=0\",\n      // \"upgrade-insecure-requests\": \"1\",\n      // \"user-agent\":\n      //   \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36\"\n    })\n      .then(response => {\n        let final = cheerio.load(response);\n        return final;\n      })\n\n      //Begins promise chain, returns array of comment URLs\n      // rp(options)\n      .then($ => {\n        let linkArr = [];\n        let scoreArr = [];\n        $(`a.bylink.comments.may-blank`).attr(`href`, (i, val) => {\n          linkArr.push(val);\n        });\n\n        $(`.score.unvoted`).attr(`title`, (i, val) => {\n          if (val === undefined) {\n            scoreArr.push(\"0\");\n          } else {\n            scoreArr.push(val);\n          }\n        });\n\n        scoreArr = scoreArr.slice(0, 8);\n        scoreArr.forEach((score, index) => {\n          let key = \"postScore\" + index;\n          let stateObj = {};\n          stateObj[key] = score;\n          this.setState(stateObj);\n        });\n        return linkArr.slice(0, 8);\n      })\n      //For each post, returns .JSON of each link in the array, also sets title\n      .then(arr => {\n        arr.forEach((str, index) => {\n          let strSplit = str.split(\"/\");\n          let keyTitle = \"post\" + index;\n          let titleObj = {};\n          let title = \"/r/\" + strSplit[4];\n          titleObj[\"subreddit\"] = title;\n          let phrase = strSplit[7]\n            .replace(/_/g, \" \")\n            .toLowerCase()\n            .split(\" \")\n            .map(word => {\n              return word[0].toUpperCase() + word.substr(1);\n            })\n            .join(\" \");\n          titleObj[keyTitle] = phrase;\n          this.setState(titleObj);\n          // Recursively unnests comments and sets state\n          axios\n            .get(str + \".json\")\n            .then(res => {\n              const elements = res.data[1].data.children;\n              let str = _.flattenDeep(getComments(elements));\n              str = str.join(\" \");\n              let stateObj = {};\n              let commentKey = \"comments\" + index;\n              stateObj[commentKey] = str.slice(0, 75) + \"...\";\n              this.setState(stateObj);\n              return str;\n            })\n            //Finds Azure score\n            // .then((str) => {\n            //   let accessKey = \"f420e632e0de48a3a32861c44ca66d5d\";\n\n            //   let uri = \"eastus.api.cognitive.microsoft.com\";\n            //   let pathScore = \"/text/analytics/v2.0/sentiment\";\n            //   let pathPhrases = \"/text/analytics/v2.0/keyPhrases\";\n\n            //   let response_handler_score = response => {\n            //     let bodyScore = \"\";\n            //     response.on(\"data\", d => {\n            //       bodyScore += d;\n            //       let strScore = bodyScore.substring(23, 30);\n            //       strScore = strScore.replace(/[^\\d.-]/g, \"\");\n            //       let score = Math.round((+strScore - 0.5) * 2000) / 1000 + 0.0001;\n            //       let key = \"azureScore\" + index;\n            //       let stateObj = {};\n            //       stateObj[key] = score;\n            //       this.setState(stateObj);\n            //     });\n            //     response.on(\"error\", e => {\n            //       console.log(\"Error: \" + e.message);\n            //     });\n            //   };\n\n            //   let get_sentiments = documents => {\n            //     let bodyScore = JSON.stringify(documents);\n\n            //     let request_params_score = {\n            //       method: \"POST\",\n            //       hostname: uri,\n            //       path: pathScore,\n            //       headers: {\n            //         \"Ocp-Apim-Subscription-Key\": accessKey\n            //       }\n            //     };\n            //     let reqScore = https.request(\n            //       request_params_score,\n            //       response_handler_score\n            //     );\n            //     reqScore.write(bodyScore);\n            //     reqScore.end();\n            //   };\n            //   let documents = {\n            //     documents: [\n            //       { id: \"1\", language: \"en\", text: str.substring(0, 5000) }\n            //     ]\n            //   };\n            //   get_sentiments(documents);\n            //   return str;\n            // })\n            //Finds Sliwinski score\n            .then(str => {\n              let r1 = sentiment.analyze(str);\n              let keyScore = \"textAPIScore\" + index;\n              let apiObj = {};\n              let score = Math.round(+r1.comparative * 8000) / 1000 + 0.000001;\n              if (Math.abs(score) > 1) {\n                if (score > 1) {\n                  score = 1;\n                } else {\n                  score = -1;\n                }\n              }\n              apiObj[keyScore] = score;\n              let keyWords = \"words\" + index;\n              apiObj[keyWords] = r1.tokens.length;\n              this.setState(apiObj);\n              return str;\n            })\n            .then(str => {\n              fetch(\"/api/aylien\", {\n                method: \"POST\",\n                body: str\n              });\n            });\n        });\n      });\n  }\n\n  render() {\n    // let azureAverage =\n    //   +(\n    //     +this.state.azureScore0 +\n    //     +this.state.azureScore1 +\n    //     +this.state.azureScore2 +\n    //     +this.state.azureScore3 +\n    //     +this.state.azureScore4 +\n    //     +this.state.azureScore5 +\n    //     +this.state.azureScore6 +\n    //     +this.state.azureScore7\n    //   ) / 8;\n\n    let textAPIAverage =\n      +(\n        +this.state.textAPIScore0 +\n        +this.state.textAPIScore1 +\n        +this.state.textAPIScore2 +\n        +this.state.textAPIScore3 +\n        +this.state.textAPIScore4 +\n        +this.state.textAPIScore5 +\n        +this.state.textAPIScore6 +\n        +this.state.textAPIScore7\n      ) / 8;\n\n    let chartData = {\n      labels: [1, 2, 3, 4, 5, 6, 7, 8, \"Average\"],\n      datasets: [\n        // {\n        //   label: \"Microsoft Azure\",\n        //   data: [\n        //     +this.state.azureScore0 - 0.0001,\n        //     +this.state.azureScore1 - 0.0001,\n        //     +this.state.azureScore2 - 0.0001,\n        //     +this.state.azureScore3 - 0.0001,\n        //     +this.state.azureScore4 - 0.0001,\n        //     +this.state.azureScore5 - 0.0001,\n        //     +this.state.azureScore6 - 0.0001,\n        //     +this.state.azureScore7 - 0.0001,\n        //     azureAverage\n        //   ],\n        //   backgroundColor: [\n        //     \"#00ffff\",\n        //     \"#00ffff\",\n        //     \"#00ffff\",\n        //     \"#00ffff\",\n        //     \"#00ffff\",\n        //     \"#00ffff\",\n        //     \"#00ffff\",\n        //     \"#00ffff\",\n        //     \"blue\"\n        //   ]\n        // },\n        {\n          label: \"Sliwinski / MIT Media Lab\",\n\n          data: [\n            +this.state.textAPIScore0 - 0.000001,\n            +this.state.textAPIScore1 - 0.000001,\n            +this.state.textAPIScore2 - 0.000001,\n            +this.state.textAPIScore3 - 0.000001,\n            +this.state.textAPIScore4 - 0.000001,\n            +this.state.textAPIScore5 - 0.000001,\n            +this.state.textAPIScore6 - 0.000001,\n            +this.state.textAPIScore7 - 0.000001,\n            textAPIAverage\n          ],\n          backgroundColor: [\n            \"#ffaafa\",\n            \"#ffaafa\",\n            \"#ffaafa\",\n            \"#ffaafa\",\n            \"#ffaafa\",\n            \"#ffaafa\",\n            \"#ffaafa\",\n            \"#ffaafa\",\n            \"red\"\n          ]\n        }\n      ]\n    };\n\n    let tableColumns = [\n      {\n        Header: \"Post Name\",\n        accessor: \"postName\"\n      },\n      {\n        Header: \"Karma Score\",\n        accessor: \"karmaScore\"\n      },\n      {\n        Header: \"Comment Word Count\",\n        accessor: \"words\"\n      },\n      // {\n      //   Header: \"Microsoft Azure Score\",\n      //   accessor: \"azureScore\"\n      // },\n      {\n        Header: \"Sliwinski / MIT Media Lab\",\n        accessor: \"textScore\"\n      }\n    ];\n\n    let commentColumns = [\n      {\n        Header: \"ID\",\n        accessor: \"id\",\n        width: 100\n      },\n      {\n        Header: \"Post Title\",\n        accessor: \"postTitle\",\n        minWidth: 200\n      },\n      {\n        Header: \"Beginning of Comment String\",\n        accessor: \"comments\",\n        minWidth: 400\n      }\n    ];\n\n    let commentData = [\n      {\n        id: 1,\n        postTitle: this.state.post0,\n        comments: this.state.comments0\n      },\n      {\n        id: 2,\n        postTitle: this.state.post1,\n        comments: this.state.comments1\n      },\n      {\n        id: 3,\n        postTitle: this.state.post2,\n        comments: this.state.comments2\n      },\n      {\n        id: 4,\n        postTitle: this.state.post3,\n        comments: this.state.comments3\n      },\n      {\n        id: 5,\n        postTitle: this.state.post4,\n        comments: this.state.comments4\n      },\n      {\n        id: 6,\n        postTitle: this.state.post5,\n        comments: this.state.comments5\n      },\n      {\n        id: 7,\n        postTitle: this.state.post6,\n        comments: this.state.comments6\n      },\n      {\n        id: 8,\n        postTitle: this.state.post7,\n        comments: this.state.comments7\n      }\n    ];\n\n    let tableData = [\n      {\n        postName: this.state.post0,\n        karmaScore: this.state.postScore0,\n        // words: this.state.words0,\n        // azureScore: this.state.azureScore0 - 0.0001,\n        textScore: Math.round(this.state.textAPIScore0 * 1000) / 1000\n      },\n      {\n        postName: this.state.post1,\n        karmaScore: this.state.postScore1,\n        words: this.state.words1,\n        // azureScore: this.state.azureScore1 - 0.0001,\n        textScore: Math.round(this.state.textAPIScore1 * 1000) / 1000\n      },\n      {\n        postName: this.state.post2,\n        karmaScore: this.state.postScore2,\n        words: this.state.words2,\n        // azureScore: this.state.azureScore2 - 0.0001,\n        textScore: Math.round(this.state.textAPIScore2 * 1000) / 1000\n      },\n      {\n        postName: this.state.post3,\n        karmaScore: this.state.postScore3,\n        words: this.state.words3,\n        // azureScore: this.state.azureScore3 - 0.0001,\n        textScore: Math.round(this.state.textAPIScore3 * 1000) / 1000\n      },\n      {\n        postName: this.state.post4,\n        karmaScore: this.state.postScore4,\n        words: this.state.words4,\n        // azureScore: this.state.azureScore4 - 0.0001,\n        textScore: Math.round(this.state.textAPIScore4 * 1000) / 1000\n      },\n      {\n        postName: this.state.post5,\n        karmaScore: this.state.postScore5,\n        words: this.state.words5,\n        // azureScore: this.state.azureScore5 - 0.0001,\n        textScore: Math.round(this.state.textAPIScore5 * 1000) / 1000\n      },\n      {\n        postName: this.state.post6,\n        karmaScore: this.state.postScore6,\n        words: this.state.words6,\n        // azureScore: this.state.azureScore6 - 0.0001,\n        textScore: Math.round(this.state.textAPIScore6 * 1000) / 1000\n      },\n      {\n        postName: this.state.post7,\n        karmaScore: this.state.postScore7,\n        words: this.state.words7,\n        // azureScore: this.state.azureScore7 - 0.0001,\n        textScore: Math.round(this.state.textAPIScore7 * 1000) / 1000\n      }\n    ];\n\n    return (\n      <div className=\"App\">\n        {this.state.textAPIScore0 &&\n        this.state.textAPIScore1 &&\n        this.state.textAPIScore2 ? (\n          <div>\n            <h3>\n              Titles and Comment Threads for Top Posts of {this.state.subreddit}\n            </h3>\n            <ReactTable\n              data={commentData}\n              columns={commentColumns}\n              defaultPageSize={8}\n            />\n            <br />\n            <h3>\n              Sentiment Scores for Comments of Top Posts of{\" \"}\n              {this.state.subreddit}\n            </h3>\n            <Bar\n              data={chartData}\n              type={\"Bar\"}\n              className=\"-striped -highlight\"\n            />\n            <br />\n            <h3>\n              Scores and Data for Comments of Top Posts of{\" \"}\n              {this.state.subreddit}\n            </h3>\n            <ReactTable\n              data={tableData}\n              columns={tableColumns}\n              defaultPageSize={8}\n            />\n          </div>\n        ) : (\n          <div className=\"centered\">\n            <h1>Hold On, We're Going Home...</h1>\n            <img\n              alt=\"snoo-gif\"\n              src=\"http://i0.kym-cdn.com/photos/images/original/000/919/288/57b.gif\"\n            />\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}